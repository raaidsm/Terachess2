OVERALL PLAN:
-Starting position has a pre-defined set of legal moves
-Once a legal move is made, Java code calculates legal moves for every piece
  -This way, it knows if there is check/checkmate
-When JavaScript side selects a square, it queries the Java side for all legal moves for that piece
-When one of the legal moves is selected, the process repeats again

REFACTORING:
-Remove `OVERALL PLAN` from this file
-Add regions to this file
-Break main.js code into modules

GAME LOGIC:
-Save which square an attack hits (in AttackingPieceStruct)
-Implement method that returns list of squares attacked by a piece located at a specified square in GameEngine class
-Implement draw conditions such as too many turns without captures, repetition, insufficient material, etc.

OVER THE INTERNET:
-Host game on server somehow
-Implement WebSockets to host communication with another person

MOVE RECORDING:
-Record captured pieces
-Implement saving of moves in client-side storage (IndexedDB)
-Implement going back and forth in moves (undo last move, redo last move)