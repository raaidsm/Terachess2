CURRENTLY DOING:
-Placeholder

CURRENT COMMIT:
-Placeholder

REFACTORING:
-Rewrite CheckManager to better implement abstraction and convenience, and also properly accommodate checks from both
 sides simultaneously (one side for checks active during this turn, and the other for checks set during this turn)
-Generate front-end board with back-end results
-Just...refactor MoveCalcResultsStruct
-Record the coordinate of each square within the square object
-Change board keys to be numbers rather than strings
-Board (I think) isn't updated by pieces, only queried. Therefore, send in a copy of the board instead of the entire
 BoardManager instance

GAME LOGIC:
-Implement draw conditions such as too many turns without captures, repetition, insufficient material, etc.

BUGS:
-Overhaul move calculation system to calculate moves for both colours of pieces after a move is made to properly record
 attacks of a piece after it makes a move
-Only set attack on a square if it's a capturing attack
-Record type of pin (vertical, diagonal-ascending, horizontal, diagonal-descending, other)
-Reduce moves due to pin by removing all moves that don't match the type of pin
-King's move calculation can lead to seemingly random squares being found as legal square moves
  -Issue might be deeply rooted or surface-level

OVER THE INTERNET:
-Host game on server somehow
-Implement WebSockets to host communication with another person

MOVE RECORDING:
-Record captured pieces
-Implement saving of moves in client-side storage (IndexedDB)
-Implement going back and forth in moves (undo last move, redo last move)